<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/seven_timelines/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/seven_timelines/" rel="alternate" type="text/html" /><updated>2022-06-24T18:13:20+02:00</updated><id>http://localhost:4000/seven_timelines/feed.xml</id><title type="html">This Timeline</title><subtitle>This site is my personal blog intended to capture whatever I think is worth writing.  Some things about my career, being a father, being a spouse and a human living right now.</subtitle><entry><title type="html">MAME</title><link href="http://localhost:4000/seven_timelines/jekyll/update/2022/06/10/MAME.html" rel="alternate" type="text/html" title="MAME" /><published>2022-06-10T06:21:01+02:00</published><updated>2022-06-10T06:21:01+02:00</updated><id>http://localhost:4000/seven_timelines/jekyll/update/2022/06/10/MAME</id><content type="html" xml:base="http://localhost:4000/seven_timelines/jekyll/update/2022/06/10/MAME.html">&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;I’ve begun working on a  &lt;a href=&quot;https://pages.github.com/&quot;&gt;MAME&lt;/a&gt; cabinet and have really struggled to find good walkthroughs so thought I’d start recording on my (likely to be long) journey. If you’re not familiar, click that link as MAME is generally regarded as the best arcade cabinet emulator and basically every reference for similar arcade cabinets pointed back to it.&lt;/p&gt;

&lt;p&gt;There are many considerations with MAME of course but so far I’ve run into decisions on:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Emulation software&lt;/li&gt;
  &lt;li&gt;The actual setup (2 v 4 player)&lt;/li&gt;
  &lt;li&gt;Joystick/button hardware&lt;/li&gt;
  &lt;li&gt;Emulator/PC hardware&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;….and I haven’t started building yet….before I get rolling though, I personally recommend &lt;a href=&quot;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=2ahUKEwj6vMv-iqT4AhVzLH0KHSuLB2QQFnoECAoQAQ&amp;amp;url=https%3A%2F%2Fwww.reddit.com%2Fr%2FMAME%2F&amp;amp;usg=AOvVaw1ChbtXrWJwUIOavB1qwVVu&quot;&gt;r/mame&lt;/a&gt; and &lt;a href=&quot;https://www.reddit.com/r/cade/&quot;&gt;r/cade&lt;/a&gt; on Reddit as good resources. Great communities that I have used for questions and some good inspiration as well.&lt;/p&gt;

&lt;h3 id=&quot;emulation-software&quot;&gt;Emulation Software&lt;/h3&gt;
&lt;p&gt;The first hurdle to clear, quickly, was what emulation software to use.  You might think I’m about to suggest MAME but actually, I suggest: multiple.  The reality is the more I think about this cabinet, the more I think modern arcade cabinets are limited.  There are so many good emulators now:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Citra&lt;/li&gt;
  &lt;li&gt;Snes9x&lt;/li&gt;
  &lt;li&gt;Retroarch&lt;/li&gt;
  &lt;li&gt;Dolphin&lt;/li&gt;
  &lt;li&gt;PCSX&lt;/li&gt;
  &lt;li&gt;Redream&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So why limit yourself to one?  While I’m not decided on my final design, I am leaning toward a highly custom cabinet where I can swap out components or open up the cabinet to play with a USB Playstation or N64 controller.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Weird note with MAME:&lt;/b&gt; For reasons I don’t understand yet, your ROMs and your emulator have to match versions to play.  If you have MAME 13, your ROMs have to be the same version. If you get an error message when launching, check that first.&lt;/p&gt;

&lt;h3 id=&quot;player-setup&quot;&gt;Player Setup&lt;/h3&gt;
&lt;p&gt;Player setup is (mostly) easy.  Two or four player?  Sure, you can do one or three player you psychopath.  My considerations were really:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Size of the cabinet (four is obviously a LOT bigger for both screen and cabinet and thus much heavier)&lt;/li&gt;
  &lt;li&gt;Number of people you really expect to play it (will two people be squished if you can’t space four player setups out?)&lt;/li&gt;
  &lt;li&gt;Other gear you want (roller ball, light guns, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One note: if you choose to do a prefab cabinet from a vendor, I have had a REALLY tough time finding a four player one.  I’m planning to build my own so that’s not a major concern but you should be aware.  That may also come into play if you look for artwork as most artwork seems designed for a 2P setup.&lt;/p&gt;

&lt;h3 id=&quot;joystickbutton-hardware&quot;&gt;Joystick/Button Hardware&lt;/h3&gt;
&lt;p&gt;I thought joystick and button hardware would be an easier decision but it turned out to take quite a while.  Firstly, there just isn’t that much availability in my research.  Mainly, if you’re not looking for actual original arcade hardware (which you’ll have to scrounge from a dead/restored cabinet), Amazon is probably the best place.&lt;/p&gt;

&lt;p&gt;I ended up with &lt;a href=&quot;https://www.amazon.com/gp/product/B00WAZK5K8/ref=ppx_yo_dt_b_search_asin_image?ie=UTF8&amp;amp;psc=1&quot;&gt;EasyGet’s&lt;/a&gt; LED button and joystick hardware which I’m fond of so far.  The setup is easy and it works in 8-way and 4-way setup (forum discussion &lt;a href=&quot;https://www.giantbomb.com/super-street-fighter-iv/3030-28437/forums/what-is-the-difference-between-a-4-and-8-way-stick-439168/&quot;&gt;here&lt;/a&gt; if you want to read more).  It’s probably juvenile but I also like that the buttons light up and you can remove the covers and add your own artwork on each button if you want.  This isn’t my style but an &lt;a href=&quot;/seven_timelines/images/custom-buttons.jpg&quot;&gt;example of what I mean.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Other than this, there are maybe 1-3 other brands that are easily purchaseable but I couldn’t find much overwhelming praise one way or another.  FWIW, &lt;strong&gt;Sanwa&lt;/strong&gt; was mentioned several times in my reseach Seems like, unless you’re looking for super high end gear, you should be fine with something with good reviews.&lt;/p&gt;

&lt;h3 id=&quot;emulatorpc-hardware&quot;&gt;Emulator/PC Hardware&lt;/h3&gt;
&lt;p&gt;And finally, I had to evaluate what kind of hardware I want for my emulator.  Many projects I’ve seen run off a simple Gen 3 Raspberry Pi and they’re so cheap and so easy to use, you can easily create your arcade with one.  I have previously setup emulators with a Pi and it is at worst a weekend project for newbies in the Pi space.&lt;/p&gt;

&lt;p&gt;Moreover, the Pis have gotten better and better over time so you can run more and more games.  However, you must decide on what games and emulators you want to run BEFORE you make this call.  Nearly all the simple arcade games (Pac Man, Galaga, etc.) will run without a sweat on a Pi but remember, not all emulators are equal.  In my case, I REALLY want to run NFL Blitz Arcade and so far, I think I will run it on MAME.  Note: for this particular game, you can run it on Dreamcast as some have done and just map the controls but I didn’t want to.&lt;/p&gt;

&lt;p&gt;However, the Blitz port for MAME is pretty much always poorly designed. This is not a knock on the engineers doing this incredibly hard (and unrewarded) work but rather, a function of closed knowledge. Blitz hardware specs are not shared and so, engineers are using methods from other games as approximations and they just aren’t perfect.  The result to me: I need hardware with an i7 intel chip or later and probably 8GB RAM (I’m looking for 16GB).  My hardware will choke on bad code so I need to compensate.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;How can I test that before I buy my gear?&lt;/b&gt;
You will need to find some other way to test it (I run MAME on a Linux machine I have sitting around) or you’ll want to look for the games you want in forums where people are having issues or you’ll have to overbuy your hardware and hope for the best.  The last option is: setup a Pi (like $40 to start) and see if that works for you.  I’m going to prototype anyway until I get what I want so why not try that with hardware?&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><category term="MAME," /><category term="walkthrough" /><summary type="html">Overview I’ve begun working on a MAME cabinet and have really struggled to find good walkthroughs so thought I’d start recording on my (likely to be long) journey. If you’re not familiar, click that link as MAME is generally regarded as the best arcade cabinet emulator and basically every reference for similar arcade cabinets pointed back to it.</summary></entry><entry><title type="html">GitHub Pages and Jekyll</title><link href="http://localhost:4000/seven_timelines/jekyll/update/2022/02/06/GitHub_Pages_and_Jekyll-copy.html" rel="alternate" type="text/html" title="GitHub Pages and Jekyll" /><published>2022-02-06T05:13:01+01:00</published><updated>2022-02-06T05:13:01+01:00</updated><id>http://localhost:4000/seven_timelines/jekyll/update/2022/02/06/GitHub_Pages_and_Jekyll%20copy</id><content type="html" xml:base="http://localhost:4000/seven_timelines/jekyll/update/2022/02/06/GitHub_Pages_and_Jekyll-copy.html">&lt;p&gt;Wow.  I have spent an inordinately long amount of time trying to get Jekyll working with &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;.  GH Pages is a fantastic product and usually super easy to use but something about it’s function with Jekyll creates a weird nuance I don’t understand.&lt;/p&gt;

&lt;p&gt;First I played with folder structure.  A blog post I read indicated one issue was not having CSS in the root directory structure with main.css under it.  Moving it didn’t fix anything and while I haven’t removed it yet, I suspect it actually does nothing right now.&lt;/p&gt;

&lt;p&gt;I tried commenting in lines in config.yml for “root” or for “css” or “link” to reference a stylesheet and none of those did anything.&lt;/p&gt;

&lt;p&gt;Finally I stumbled on an [article][article-baseurl] walking config.yml in more detail once I noticed empty url and baseurl fields.  Well, this article is USEFUL but not the final story.  While Michael’s explanations for baseurl and url are correct, they didn’t work for me.  Injecting, as suggested&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;ss&quot;&gt;baseurl: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://th3incredibl3hulk.github.io&quot;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;url: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/seven_timelines&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;simply yields this URL structure for me:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;th3incredibl3hulk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seven_timelines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;th3incredibl3hulk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seven_timelines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rest_of_your_site_pages&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Don’t ask me why, but it did.&lt;/p&gt;

&lt;p&gt;After mucking with it for a while, I landed on this successfully:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;ss&quot;&gt;baseurl: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/seven_timelines&quot;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;url: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://th3incredibl3hulk.github.io&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now everything is FINALLY functioning as expected.  CSS is loading, site pages are referenceable and it still builds locally as well.&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">Wow. I have spent an inordinately long amount of time trying to get Jekyll working with GitHub Pages. GH Pages is a fantastic product and usually super easy to use but something about it’s function with Jekyll creates a weird nuance I don’t understand.</summary></entry><entry><title type="html">Exploring Jekyll</title><link href="http://localhost:4000/seven_timelines/jekyll/update/2021/11/19/Exploring-Jekyll.html" rel="alternate" type="text/html" title="Exploring Jekyll" /><published>2021-11-19T04:40:01+01:00</published><updated>2021-11-19T04:40:01+01:00</updated><id>http://localhost:4000/seven_timelines/jekyll/update/2021/11/19/Exploring-Jekyll</id><content type="html" xml:base="http://localhost:4000/seven_timelines/jekyll/update/2021/11/19/Exploring-Jekyll.html">&lt;p&gt;This is my first post in Jekyll!  I actually heard about this blogging tech from &lt;a href=&quot;https://twitter.com/JackRhysider&quot;&gt;@jackrhysider&lt;/a&gt;, the infosec guru that he is.  He uses it for his own personal blog and I decided to give it a whirl for me as well. I’ve never found another piece of tech that gives good functionality and also minimal upkeep needed.&lt;/p&gt;

&lt;p&gt;So far, I’ve only played with the basic setup and this post!  Going to explore some formatting next!  Not sure what aesthetic I want yet so we’ll see what the internet has to offer.&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">This is my first post in Jekyll! I actually heard about this blogging tech from @jackrhysider, the infosec guru that he is. He uses it for his own personal blog and I decided to give it a whirl for me as well. I’ve never found another piece of tech that gives good functionality and also minimal upkeep needed. So far, I’ve only played with the basic setup and this post! Going to explore some formatting next! Not sure what aesthetic I want yet so we’ll see what the internet has to offer.</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/seven_timelines/jekyll/update/2021/11/15/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2021-11-15T04:25:01+01:00</published><updated>2021-11-15T04:25:01+01:00</updated><id>http://localhost:4000/seven_timelines/jekyll/update/2021/11/15/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/seven_timelines/jekyll/update/2021/11/15/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Tom&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &apos;Hi, Tom&apos; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated. Jekyll requires blog post files to be named according to the following format: YEAR-MONTH-DAY-title.MARKUP Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and MARKUP is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works. Jekyll also offers powerful support for code snippets: def print_hi(name) puts &quot;Hi, #{name}&quot; end print_hi(&apos;Tom&apos;) #=&amp;gt; prints &apos;Hi, Tom&apos; to STDOUT. Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk.</summary></entry></feed>